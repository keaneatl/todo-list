(()=>{"use strict";var e={917:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),c=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(c).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],s=0;s<e.length;s++){var i=e[s],l=r.base?i[0]+r.base:i[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=n(u),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(t[p].references++,t[p].updater(f)):t.push({identifier:u,updater:o(f,r),references:1}),c.push(u)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var s=n(a[c]);t[s].references--}for(var i=r(e,o),l=0;l<a.length;l++){var d=n(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=i}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),c=n.n(a),s=n(565),i=n.n(s),l=n(216),d=n.n(l),u=n(589),p=n.n(u),f=n(917),m={};m.styleTagTransform=p(),m.setAttributes=i(),m.insert=c().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const h=e=>({projectName:e,tasks:[]}),g={projectsArray:[],defaultProject:h("inbox")},y=((()=>{const e=document.querySelector(".display-lh"),t=document.querySelector(".home-heading"),n=document.querySelector(".inbox"),r=()=>{const t=Array.from(document.querySelectorAll(".task"));"Inbox"!==e&&(t.forEach((e=>e.setAttribute("style","display:none;"))),e.textContent="Inbox",g.defaultProject.tasks.forEach((e=>{for(let n=0;n<t.length;n++)e.title===t[n].childNodes[0].textContent&&t[n].removeAttribute("style")})))};t.addEventListener("click",r),n.addEventListener("click",r)})(),e=>{const t=document.querySelector(".display-lh"),n=document.querySelectorAll(".project-item"),r=Array.from(document.querySelectorAll(".task"));t.textContent=e,r.forEach((e=>e.setAttribute("style","display:none;"))),n.forEach((n=>{if(t.textContent===e){const t=Array.from(document.querySelectorAll(".task"));g.projectsArray.forEach((n=>{n.projectName===e&&n.tasks.forEach((e=>{for(let n=0;n<t.length;n++)e.title===t[n].childNodes[0].textContent&&t[n].removeAttribute("style")}))}))}}))}),A=((()=>{const e=document.querySelector(".hambg"),t=document.querySelector(".display"),n=document.querySelector(".sidebar"),r=document.querySelector(".close-hambg");e.addEventListener("click",(()=>{t.classList.toggle("display"),t.classList.toggle("hide-disp"),n.classList.toggle("sidebar"),n.classList.toggle("show-sb")})),r.addEventListener("click",(()=>{t.classList.toggle("display"),t.classList.toggle("hide-disp"),n.classList.toggle("sidebar"),n.classList.toggle("show-sb")}))})(),(e,t,n)=>{const r=document.querySelector(".add-task"),o=document.querySelector(".display-lh"),a=document.createElement("div"),c=document.createElement("img"),s=document.createElement("span"),i=document.createElement("p"),l=document.createElement("p");if(a.classList.add("task"),s.classList.add("task-h"),c.classList.add("ico","checkbox"),l.classList.add("due-date"),i.classList.add("task-desc"),c.src="./images/icons/circle-svgrepo-com.svg",c.addEventListener("click",(()=>a.remove())),e||t||n)s.append(c,e),l.textContent=n,i.textContent=t,a.append(s,l,i),r.insertAdjacentElement("beforebegin",a);else{const e=document.createElement("input"),t=document.createElement("input"),n=document.createElement("input");e.classList.add("task-h-input"),t.classList.add("task-desc-input"),e.type="text",e.placeholder="Title",n.type="date",t.type="text",t.placeholder="Description",e.addEventListener("change",(()=>{s.append(e.value),e.remove()})),n.addEventListener("change",(()=>{l.append(n.value),n.remove()})),t.addEventListener("change",(()=>{i.append(t.value),t.remove()})),s.append(c,e),i.append(t),l.append(n),a.append(s,l,i),r.insertAdjacentElement("beforebegin",a),(e=>{const t={title:undefined,desc:undefined,dueDate:undefined};let n=Array.from(document.querySelectorAll(".task"));"Inbox"===e?n.forEach((e=>{if(""!==e.querySelector(".task-h").textContent)return;const n=e.querySelector(".checkbox"),r=e.childNodes[0],o=e.childNodes[1],a=e.childNodes[2];r.addEventListener("change",(()=>{t.title=r.childNodes[1].nodeValue,localStorage.setItem("defaultProject",JSON.stringify(g.defaultProject))})),a.addEventListener("change",(()=>{t.desc=a.childNodes[0].nodeValue,localStorage.setItem("defaultProject",JSON.stringify(g.defaultProject))})),o.addEventListener("change",(()=>{t.dueDate=o.childNodes[0].nodeValue,localStorage.setItem("defaultProject",JSON.stringify(g.defaultProject))})),g.defaultProject.tasks.push(t),n.addEventListener("click",(()=>{const e=g.defaultProject.tasks.indexOf(t);g.defaultProject.tasks.splice(e,1),localStorage.setItem("defaultProject",JSON.stringify(g.defaultProject))})),localStorage.setItem("defaultProject",JSON.stringify(g.defaultProject))})):n.forEach((n=>{if(""!==n.querySelector(".task-h").textContent)return;const r=n.childNodes[0],o=n.childNodes[1],a=n.childNodes[2],c=n.querySelector(".checkbox");r.addEventListener("change",(()=>{t.title=r.childNodes[1].nodeValue,localStorage.setItem("projects",JSON.stringify(g.projectsArray))})),a.addEventListener("change",(()=>{t.desc=a.childNodes[0].nodeValue,localStorage.setItem("projects",JSON.stringify(g.projectsArray))})),o.addEventListener("change",(()=>{t.dueDate=o.childNodes[0].nodeValue,localStorage.setItem("projects",JSON.stringify(g.projectsArray))})),g.projectsArray.forEach((n=>{n.projectName===e&&(n.tasks.push(t),c.addEventListener("click",(()=>{const e=n.tasks.indexOf(t);n.tasks.splice(e,1),localStorage.setItem("projects",JSON.stringify(g.projectsArray))})))})),localStorage.setItem("projects",JSON.stringify(g.projectsArray))}))})(o.textContent)}}),v=(document.querySelector(".add-task").addEventListener("click",(()=>A())),e=>{const t=document.querySelector(".project-items-ul"),n=document.createElement("li"),r=document.createElement("img"),o=document.createElement("img"),a=document.createElement("span");if(n.classList.add("project-item"),r.classList.add("ico"),r.classList.add("add-proj"),r.src="./images/icons/task-list-svgrepo-com.svg",o.classList.add("close-proj"),o.src="./images/icons/close-svgrepo-com.svg",e)a.textContent=e,n.addEventListener("click",(()=>y(e)));else{const e=document.createElement("input");e.type="text",e.placeholder="Project Name",e.classList.add("proj-title-input"),e.addEventListener("change",(()=>{a.append(e.value),e.remove(),n.addEventListener("click",(()=>y(a.textContent))),(e=>{const t=Array.from(document.querySelectorAll(".project-item")),n=h(e);n.projectName=e,t.forEach((t=>{if(t.childNodes[1].childNodes[0].textContent!==e)return;const r=t.childNodes[2];g.projectsArray.push(n),r.addEventListener("click",(()=>{const e=g.projectsArray.indexOf(n);g.projectsArray.splice(e,1),localStorage.setItem("projects",JSON.stringify(g.projectsArray))})),localStorage.setItem("projects",JSON.stringify(g.projectsArray))}))})(a.textContent)})),a.append(e)}o.addEventListener("click",(()=>{n.remove()})),n.append(r,a,o),t.append(n)});document.querySelector(".add-proj").addEventListener("click",(()=>v())),(()=>{if(localStorage.getItem("projects")){let e=JSON.parse(localStorage.getItem("projects")),t=JSON.parse(localStorage.getItem("defaultProject"));g.defaultProject=t,g.projectsArray=e,g.defaultProject.tasks.forEach((e=>{A(e.title,e.desc,e.dueDate),Array.from(document.querySelectorAll(".task")).forEach((t=>{const n=t.childNodes[0],r=t.querySelector(".checkbox");n.childNodes[1].nodeValue===e.title&&r.addEventListener("click",(()=>{const t=g.defaultProject.tasks.indexOf(e);g.defaultProject.tasks.splice(t,1),localStorage.setItem("defaultProject",JSON.stringify(g.defaultProject))}))}))})),g.projectsArray.forEach((e=>{v(e.projectName),Array.from(document.querySelectorAll(".project-item")).forEach((t=>{t.childNodes[1].childNodes[0].textContent===e.projectName&&(t.childNodes[2].addEventListener("click",(()=>{const t=g.projectsArray.indexOf(e);g.projectsArray.splice(t,1),localStorage.setItem("projects",JSON.stringify(g.projectsArray))})),localStorage.setItem("projects",JSON.stringify(g.projectsArray)))})),e.tasks.forEach((t=>{A(t.title,t.desc,t.dueDate),Array.from(document.querySelectorAll(".task")).forEach((n=>{const r=n.childNodes[0],o=n.querySelector(".checkbox");r.childNodes[1].nodeValue===t.title&&(n.setAttribute("style","display: none;"),o.addEventListener("click",(()=>{const n=e.tasks.indexOf(t);e.tasks.splice(n,1),localStorage.setItem("projects",JSON.stringify(g.projectsArray))})))}))}))}))}else(()=>{const e=g.projectsArray,t=g.defaultProject;localStorage.setItem("projects",JSON.stringify(e)),localStorage.setItem("defaultProject",JSON.stringify(t))})()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,