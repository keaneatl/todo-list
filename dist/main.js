(()=>{"use strict";var e={917:(e,t,o)=>{o.d(t,{Z:()=>s});var n=o(537),r=o.n(n),c=o(645),a=o.n(c)()(r());a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);n&&a[d[0]]||(void 0!==c&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=c),o&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=o):d[2]=o),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),c="/*# ".concat(r," */"),a=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([c]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var c={},a=[],s=0;s<e.length;s++){var l=e[s],i=n.base?l[0]+n.base:l[0],d=c[i]||0,u="".concat(i," ").concat(d);c[i]=d+1;var p=o(u),f={css:l[1],media:l[2],sourceMap:l[3]};-1!==p?(t[p].references++,t[p].updater(f)):t.push({identifier:u,updater:r(f,n),references:1}),a.push(u)}return a}function r(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o.update(e=t)}else o.remove()}}e.exports=function(e,r){var c=n(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var s=o(c[a]);t[s].references--}for(var l=n(e,r),i=0;i<c.length;i++){var d=o(c[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}c=l}}},569:e=>{var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,o)=>{e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n=o.css,r=o.media,c=o.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),c&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(n,e)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var c=t[n]={id:n,exports:{}};return e[n](c,c.exports,o),c.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=o(379),t=o.n(e),n=o(795),r=o.n(n),c=o(569),a=o.n(c),s=o(565),l=o.n(s),i=o(216),d=o.n(i),u=o(589),p=o.n(u),f=o(917),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=d(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const g=e=>({projectName:e,tasks:[]}),h={projectsArray:[],defaultProject:g("inbox")},y=((()=>{const e=document.querySelector(".display-lh"),t=document.querySelector(".home-heading"),o=document.querySelector(".inbox"),n=()=>{const t=Array.from(document.querySelectorAll(".task"));"Inbox"!==e&&(t.forEach((e=>e.setAttribute("style","display:none;"))),e.textContent="Inbox",h.defaultProject.tasks.forEach((e=>{for(let o=0;o<t.length;o++)e.title===t[o].childNodes[0].textContent&&t[o].removeAttribute("style")})))};t.addEventListener("click",n),o.addEventListener("click",n)})(),e=>{const t=document.querySelector(".display-lh"),o=document.querySelectorAll(".project-item"),n=Array.from(document.querySelectorAll(".task"));t.textContent=e,n.forEach((e=>e.setAttribute("style","display:none;"))),o.forEach((o=>{if(t.textContent===e){const t=Array.from(document.querySelectorAll(".task"));h.projectsArray.forEach((o=>{o.projectName===e&&(console.log(o),o.tasks.forEach((e=>{for(let o=0;o<t.length;o++)e.title===t[o].childNodes[0].textContent&&t[o].removeAttribute("style")})))}))}console.log(o)}))}),A=((()=>{const e=document.querySelector(".hambg"),t=document.querySelector(".display"),o=document.querySelector(".sidebar"),n=document.querySelector(".close-hambg");e.addEventListener("click",(()=>{t.classList.toggle("display"),t.classList.toggle("hide-disp"),o.classList.toggle("sidebar"),o.classList.toggle("show-sb")})),n.addEventListener("click",(()=>{t.classList.toggle("display"),t.classList.toggle("hide-disp"),o.classList.toggle("sidebar"),o.classList.toggle("show-sb")}))})(),(e,t,o)=>{const n=document.querySelector(".add-task"),r=document.querySelector(".display-lh"),c=document.createElement("div"),a=document.createElement("img"),s=document.createElement("span"),l=document.createElement("p"),i=document.createElement("p");if(c.classList.add("task"),s.classList.add("task-h"),a.classList.add("ico","checkbox"),i.classList.add("due-date"),l.classList.add("task-desc"),a.src="./images/icons/circle-svgrepo-com.svg",a.addEventListener("click",(()=>c.remove())),e||t||o)console.log(h.defaultProject.tasks),s.append(a,e),i.textContent=o,l.textContent=t,c.append(s,i,l),n.insertAdjacentElement("beforebegin",c);else{const e=document.createElement("input"),t=document.createElement("input"),o=document.createElement("input");e.classList.add("task-h-input"),t.classList.add("task-desc-input"),e.type="text",e.placeholder="Title",o.type="date",t.type="text",t.placeholder="Description",e.addEventListener("change",(()=>{s.append(e.value),e.remove()})),o.addEventListener("change",(()=>{i.append(o.value),o.remove()})),t.addEventListener("change",(()=>{l.append(t.value),t.remove()})),s.append(a,e),l.append(t),i.append(o),c.append(s,i,l),n.insertAdjacentElement("beforebegin",c),((e,t)=>{const o={title:undefined,desc:undefined,dueDate:undefined};let n=Array.from(document.querySelectorAll(".task"));"Inbox"===e?n.forEach(((e,t)=>{if(""!==e.querySelector(".task-h").textContent)return;const n=e.querySelector(".checkbox"),r=e.childNodes[0],c=e.childNodes[1],a=e.childNodes[2];r.addEventListener("change",(()=>{o.title=r.childNodes[1].nodeValue,localStorage.setItem("defaultProject",JSON.stringify(h.defaultProject))})),a.addEventListener("change",(()=>{o.desc=a.childNodes[0].nodeValue,localStorage.setItem("defaultProject",JSON.stringify(h.defaultProject))})),c.addEventListener("change",(()=>{o.dueDate=c.childNodes[0].nodeValue,localStorage.setItem("defaultProject",JSON.stringify(h.defaultProject))})),h.defaultProject.tasks.push(o),n.addEventListener("click",(()=>{const e=h.defaultProject.tasks.indexOf(o);console.log(e),h.defaultProject.tasks.splice(e,1),localStorage.setItem("defaultProject",JSON.stringify(h.defaultProject))})),localStorage.setItem("defaultProject",JSON.stringify(h.defaultProject))})):n.forEach(((t,n)=>{if(""!==t.querySelector(".task-h").textContent)return;const r=t.childNodes[0],c=t.childNodes[1],a=t.childNodes[2],s=t.querySelector(".checkbox");r.addEventListener("change",(()=>{o.title=r.childNodes[1].nodeValue,localStorage.setItem("projects",JSON.stringify(h.projectsArray))})),a.addEventListener("change",(()=>{o.desc=a.childNodes[0].nodeValue,localStorage.setItem("projects",JSON.stringify(h.projectsArray)),console.log(o)})),c.addEventListener("change",(()=>{o.dueDate=c.childNodes[0].nodeValue,localStorage.setItem("projects",JSON.stringify(h.projectsArray))})),h.projectsArray.forEach((t=>{t.projectName===e&&(t.tasks.push(o),s.addEventListener("click",(()=>{const e=t.tasks.indexOf(o);t.tasks.splice(e,1),localStorage.setItem("projects",JSON.stringify(h.projectsArray))})))})),localStorage.setItem("projects",JSON.stringify(h.projectsArray))}))})(r.textContent)}}),v=(document.querySelector(".add-task").addEventListener("click",(()=>A())),e=>{const t=document.querySelector(".project-items-ul"),o=document.createElement("li"),n=document.createElement("img"),r=document.createElement("img"),c=document.createElement("span");if(o.classList.add("project-item"),n.classList.add("ico"),n.classList.add("add-proj"),n.src="./images/icons/task-list-svgrepo-com.svg",r.classList.add("close-proj"),r.src="./images/icons/close-svgrepo-com.svg",e)c.textContent=e,o.addEventListener("click",(()=>y(e)));else{const e=document.createElement("input");e.type="text",e.placeholder="Project Name",e.classList.add("proj-title-input"),e.addEventListener("change",(()=>{c.append(e.value),e.remove(),o.addEventListener("click",(()=>y(c.textContent))),console.log(c.textContent),(e=>{const t=Array.from(document.querySelectorAll(".project-item")),o=g(e);o.projectName=e,t.forEach((t=>{if(t.childNodes[1].childNodes[0].textContent!==e)return;const n=t.childNodes[2];h.projectsArray.push(o),n.addEventListener("click",(()=>{const e=h.projectsArray.indexOf(o);h.projectsArray.splice(e,1),localStorage.setItem("projects",JSON.stringify(h.projectsArray))})),localStorage.setItem("projects",JSON.stringify(h.projectsArray))}))})(c.textContent)})),c.append(e)}r.addEventListener("click",(()=>{o.remove()})),o.append(n,c,r),t.append(o)});document.querySelector(".add-proj").addEventListener("click",(()=>v())),(()=>{if(localStorage.getItem("projects")){let e=JSON.parse(localStorage.getItem("projects")),t=JSON.parse(localStorage.getItem("defaultProject"));h.defaultProject=t,h.projectsArray=e,h.defaultProject.tasks.forEach((e=>{A(e.title,e.desc,e.dueDate),Array.from(document.querySelectorAll(".task")).forEach((t=>{const o=t.childNodes[0],n=t.querySelector(".checkbox");o.childNodes[1].nodeValue===e.title&&(console.log("hello"),n.addEventListener("click",(()=>{const t=h.defaultProject.tasks.indexOf(e);h.defaultProject.tasks.splice(t,1),localStorage.setItem("defaultProject",JSON.stringify(h.defaultProject))})))}))})),h.projectsArray.forEach((e=>{v(e.projectName),Array.from(document.querySelectorAll(".project-item")).forEach((t=>{t.childNodes[1].childNodes[0].textContent===e.projectName&&(t.childNodes[2].addEventListener("click",(()=>{const t=h.projectsArray.indexOf(e);h.projectsArray.splice(t,1),localStorage.setItem("projects",JSON.stringify(h.projectsArray))})),localStorage.setItem("projects",JSON.stringify(h.projectsArray)))})),e.tasks.forEach((t=>{A(t.title,t.desc,t.dueDate),Array.from(document.querySelectorAll(".task")).forEach((o=>{const n=o.childNodes[0],r=o.querySelector(".checkbox");n.childNodes[1].nodeValue===t.title&&(o.setAttribute("style","display: none;"),r.addEventListener("click",(()=>{const o=e.tasks.indexOf(t);e.tasks.splice(o,1),localStorage.setItem("projects",JSON.stringify(h.projectsArray))})))}))}))}))}else(()=>{const e=h.projectsArray,t=h.defaultProject;localStorage.setItem("projects",JSON.stringify(e)),localStorage.setItem("defaultProject",JSON.stringify(t))})()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU12QixFQUFhdUIsRUFBUTdELFdBQVcsR0FDaENxQyxFQUFhd0IsRUFBUTdILGNBQWMsYUFDckNzRyxFQUFXdEMsV0FBVyxHQUFHdUMsWUFBY3pDLEVBQVksUUFDbkQrRCxFQUFRaEgsYUFBYSxRQUFTLGtCQUM5QndGLEVBQVdwQyxpQkFBaUIsU0FBUyxLQUNqQyxNQUFNeUMsRUFBZ0JyQyxFQUFRckIsTUFBTTJELFFBQVE3QyxHQUM1Q08sRUFBUXJCLE1BQU12RCxPQUFPaUgsRUFBZSxHQUNwQ0YsYUFBYUMsUUFBUSxXQUFZbEosS0FBS0MsVUFBVXlGLEVBQW1CQyxpQ0FyRHBFLE1BQ25CLE1BQU1pQixFQUFrQmxCLEVBQW1CQyxjQUNyQzRFLEVBQXFCN0UsRUFBbUJFLGVBQzlDcUQsYUFBYUMsUUFBUSxXQUFZbEosS0FBS0MsVUFBVTJHLElBQ2hEcUMsYUFBYUMsUUFBUSxpQkFBa0JsSixLQUFLQyxVQUFVc0ssS0EwRHREQyxJQWhFYSxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9yZXNldC5jc3M/ZWRlMCIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9wcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL3N3aXRjaERPTS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9pbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvdGFzay5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0LyBcXG4gICB2Mi4wIHwgMjAxMTAxMjZcXG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxcbiovXFxuXFxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXFxuYiwgdSwgaSwgY2VudGVyLFxcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsIFxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgXFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcXG5cXHRtYXJnaW46IDA7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRib3JkZXI6IDA7XFxuXFx0dmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXFxuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSwgXFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcXG5cXHRkaXNwbGF5OiBibG9jaztcXG59XFxuYm9keSB7XFxuXFx0bGluZS1oZWlnaHQ6IDE7XFxufVxcbm9sLCB1bCB7XFxuXFx0bGlzdC1zdHlsZTogbm9uZTtcXG59XFxuYmxvY2txdW90ZSwgcSB7XFxuXFx0cXVvdGVzOiBub25lO1xcbn1cXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcXG5xOmJlZm9yZSwgcTphZnRlciB7XFxuXFx0Y29udGVudDogJyc7XFxuXFx0Y29udGVudDogbm9uZTtcXG59XFxudGFibGUge1xcblxcdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuXFx0Ym9yZGVyLXNwYWNpbmc6IDA7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9yZXNldC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7OztDQUdDOztBQUVEOzs7Ozs7Ozs7Ozs7O0NBYUMsU0FBUztDQUNULFVBQVU7Q0FDVixTQUFTO0NBQ1Qsd0JBQXdCO0FBQ3pCO0FBQ0EsZ0RBQWdEO0FBQ2hEOztDQUVDLGNBQWM7QUFDZjtBQUNBO0NBQ0MsY0FBYztBQUNmO0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7QUFDQTtDQUNDLFlBQVk7QUFDYjtBQUNBOztDQUVDLFdBQVc7Q0FDWCxhQUFhO0FBQ2Q7QUFDQTtDQUNDLHlCQUF5QjtDQUN6QixpQkFBaUI7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXFxuICAgdjIuMCB8IDIwMTEwMTI2XFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXG4qL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGUsIHEge1xcblxcdHF1b3Rlczogbm9uZTtcXG59XFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcblxcdGNvbnRlbnQ6ICcnO1xcblxcdGNvbnRlbnQ6IG5vbmU7XFxufVxcbnRhYmxlIHtcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1tfaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBtb2R1bGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2kyXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlKSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKSB7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBnZW5lcmF0ZVRhc2tET00gfSBmcm9tIFwiLi9pbnRlcmZhY2VcIjtcbmltcG9ydCB7IGFkZFRhc2sgfSBmcm9tIFwiLi90YXNrXCI7XG5cbmNvbnN0IHByb2plY3RGYWN0b3J5ID0gKHByb2plY3ROYW1lKSA9PiB7XG4gICAgY29uc3QgdGFza3MgPSBbXTtcblxuICAgIHJldHVybiB7IHByb2plY3ROYW1lLCB0YXNrcyB9XG59XG5cbmNvbnN0IHByb2plY3RzQ29udHJvbGxlciA9ICgoKSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdFByb2plY3QgPSBwcm9qZWN0RmFjdG9yeSgnaW5ib3gnKTtcbiAgICBsZXQgcHJvamVjdHNBcnJheSA9IFtdO1xuXG4gICAgcmV0dXJuIHsgcHJvamVjdHNBcnJheSwgZGVmYXVsdFByb2plY3QgfVxufSkoKTtcblxuY29uc3QgYWRkUHJvaiA9ICh0eXBlID0+IHtcbiAgICBjb25zdCBwcm9qZWN0SXRlbXNBcnJheSA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtaXRlbScpKTtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gcHJvamVjdEZhY3RvcnkodHlwZSk7XG4gICAgbmV3UHJvamVjdC5wcm9qZWN0TmFtZSA9IHR5cGU7XG5cbiAgICBwcm9qZWN0SXRlbXNBcnJheS5mb3JFYWNoKHByb2plY3QgPT4ge1xuICAgICAgICBjb25zdCBwcm9qVGl0bGUgPSBwcm9qZWN0LmNoaWxkTm9kZXNbMV1cbiAgICAgICAgaWYgKHByb2pUaXRsZS5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50ICE9PSB0eXBlKXJldHVybjtcbiAgICAgICAgY29uc3QgY2xvc2VQcm9qID0gcHJvamVjdC5jaGlsZE5vZGVzWzJdO1xuXG4gICAgICAgIHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5LnB1c2gobmV3UHJvamVjdCk7XG4gICAgICAgIGNsb3NlUHJvai5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RJbmRleCA9ICBwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheS5pbmRleE9mKG5ld1Byb2plY3QpO1xuICAgICAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuc3BsaWNlKHByb2plY3RJbmRleCwgMSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSkpO1xuICAgICAgICB9KVxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSkpO1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5ld1Byb2plY3QgfVxuICAgIFxufSlcbiAgICBcblxuZXhwb3J0IHsgYWRkUHJvaiwgcHJvamVjdHNDb250cm9sbGVyIH1cblxuLy8gYmFja3VwIGNvZGVcbi8vIHByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuLy8gICAgIG5ld1Byb2plY3QucHJvamVjdE5hbWUgPSBwcm9qVGl0bGUuY2hpbGROb2Rlc1swXS5ub2RlVmFsdWU7XG4vLyAgICAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkucHVzaChuZXdQcm9qZWN0KTtcbi8vICAgICBjb25zb2xlLmxvZyhuZXdQcm9qZWN0KTtcbi8vIH0pO1xuXG4vLyBpZiAocHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuc29tZShwcm9qZWN0ID0+IHtcbi8vICAgICBwcm9qZWN0Wydwcm9qZWN0TmFtZSddID09PSB0eXBlO1xuLy8gfSkpe1xuLy8gICAgIHByb2plY3RJdGVtc0FycmF5LnByb2plY3RzQXJyYXkuZm9yRWFjaChwcm9qZWN0ID0+IHtcbi8vICAgICAgICAgY29uc3QgcHJvalRpdGxlID0gcHJvamVjdC5jaGlsZE5vZGVzWzFdXG4vLyAgICAgICAgIGlmIChwcm9qVGl0bGUuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudCA9PT0gdHlwZSl7XG4vLyAgICAgICAgICAgICBjb25zdCBjbG9zZVByb2ogPSBwcm9qZWN0LmNoaWxkTm9kZXNbMl07XG4vLyAgICAgICAgICAgICBjbG9zZVByb2ouYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2hpJyk7XG4vLyAgICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdEluZGV4ID0gIHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5LmluZGV4T2YobmV3UHJvamVjdCk7XG4vLyAgICAgICAgICAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuc3BsaWNlKHByb2plY3RJbmRleCwgMSk7XG4vLyAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkpKTtcbi8vICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgIH1cbi8vICAgICB9KVxuLy8gfSIsIi8vIEZvciBJbXByb3ZlbWVudDpcbi8vIEluIGNoZWNraW5nIHdoZXRoZXIgdGhlIHRhc2sgYmVsb25ncyB0byBhIHNwZWNpZmljIHByb2plY3QsIHVzZSBkYXRhIGluZGV4IGluc3RlYWQgb2YgXG4vLyBtYXRjaGluZyB0aGUgdGFzayB0aXRsZXNcbmltcG9ydCB7IHByb2plY3RzQ29udHJvbGxlciB9IGZyb20gXCIuL3Byb2plY3RcIjtcbmltcG9ydCB7IGdlbmVyYXRlVGFza0RPTSB9IGZyb20gXCIuL2ludGVyZmFjZVwiO1xuXG5jb25zdCByZW5kZXJIb21lID0gKCgpID0+IHtcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlzcGxheS1saCcpO1xuICAgIGNvbnN0IGhvbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZS1oZWFkaW5nJyk7XG4gICAgY29uc3QgaW5ib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5ib3gnKTtcbiAgICBjb25zdCByZW5kZXJIb21lRE9NID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50UmVuZGVyZWRUYXNrcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhc2snKSk7XG5cbiAgICAgICAgaWYgKGhlYWRlciAhPT0gJ0luYm94Jyl7XG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyZWRUYXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZTsnKSk7XG4gICAgICAgICAgICBoZWFkZXIudGV4dENvbnRlbnQgPSAnSW5ib3gnO1xuXG4gICAgICAgICAgICBwcm9qZWN0c0NvbnRyb2xsZXIuZGVmYXVsdFByb2plY3QudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRSZW5kZXJlZFRhc2tzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tbJ3RpdGxlJ10gPT09IGN1cnJlbnRSZW5kZXJlZFRhc2tzW2ldLmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlbmRlcmVkVGFza3NbaV0ucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhvbWUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZW5kZXJIb21lRE9NKTtcbiAgICBpbmJveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlbmRlckhvbWVET00pO1xufSkoKTtcblxuY29uc3QgcmVuZGVyUHJvamVjdCA9IChwcm9qVGl0bGUpID0+IHtcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlzcGxheS1saCcpO1xuICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0LWl0ZW0nKTtcbiAgICBjb25zdCBjdXJyZW50VGFza3MgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrJykpO1xuXG4gICAgaGVhZGVyLnRleHRDb250ZW50ID0gcHJvalRpdGxlO1xuICAgIGN1cnJlbnRUYXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZTsnKSk7XG5cbiAgICBjdXJyZW50UHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgaWYgKGhlYWRlci50ZXh0Q29udGVudCA9PT0gcHJvalRpdGxlKXtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSZW5kZXJlZFRhc2tzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFzaycpKTtcblxuICAgICAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuZm9yRWFjaChwcm9qID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvalsncHJvamVjdE5hbWUnXSA9PT0gcHJvalRpdGxlKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocHJvailcbiAgICAgICAgICAgICAgICAgICAgcHJvalsndGFza3MnXS5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50UmVuZGVyZWRUYXNrcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tbJ3RpdGxlJ10gPT09IGN1cnJlbnRSZW5kZXJlZFRhc2tzW2ldLmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVuZGVyZWRUYXNrc1tpXS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0KVxuICAgIH0pXG59O1xuXG5leHBvcnQge3JlbmRlckhvbWUsIHJlbmRlclByb2plY3R9XG4iLCJpbXBvcnQgeyBhZGRUYXNrIH0gZnJvbSBcIi4vdGFza1wiO1xuaW1wb3J0IHsgYWRkUHJvaiB9IGZyb20gXCIuL3Byb2plY3RcIjtcbmltcG9ydCB7IHByb2plY3RzQ29udHJvbGxlciB9IGZyb20gXCIuL3Byb2plY3RcIjtcbmltcG9ydCB7IHJlbmRlclByb2plY3QgfSBmcm9tIFwiLi9zd2l0Y2hET01cIjtcblxuY29uc3QgaGFtQnVyZ2VyID0gKCgpID0+IHtcbiAgICBcbiAgICAvLyBjYWNoZSBET01cbiAgICBjb25zdCBoYW1iZ0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oYW1iZycpO1xuICAgIGNvbnN0IG1haW5EaXNwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRpc3BsYXknKTtcbiAgICBjb25zdCBzaWRlQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXInKTtcbiAgICBjb25zdCBjbG9zZUhhbWJnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb3NlLWhhbWJnJyk7XG5cbiAgICAvLyBiaW5kIGV2ZW50c1xuICAgIGhhbWJnQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBtYWluRGlzcC5jbGFzc0xpc3QudG9nZ2xlKCdkaXNwbGF5Jyk7XG4gICAgICAgIG1haW5EaXNwLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGUtZGlzcCcpOyBcbiAgICAgICAgc2lkZUJhci5jbGFzc0xpc3QudG9nZ2xlKCdzaWRlYmFyJyk7XG4gICAgICAgIHNpZGVCYXIuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdy1zYicpO1xuICAgIH0pO1xuICAgIGNsb3NlSGFtYmcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIG1haW5EaXNwLmNsYXNzTGlzdC50b2dnbGUoJ2Rpc3BsYXknKTtcbiAgICAgICAgbWFpbkRpc3AuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZS1kaXNwJyk7IFxuICAgICAgICBzaWRlQmFyLmNsYXNzTGlzdC50b2dnbGUoJ3NpZGViYXInKTtcbiAgICAgICAgc2lkZUJhci5jbGFzc0xpc3QudG9nZ2xlKCdzaG93LXNiJyk7XG4gICAgfSlcbn0pKCk7XG5cbmNvbnN0IGdlbmVyYXRlVGFza0RPTSA9ICh0aXRsZSwgZGVzYywgZHVlKSA9PiB7XG4gICAgY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzaycpXG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRpc3BsYXktbGgnKTtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgdGFza0NoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgY29uc3QgdGFza1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGNvbnN0IHRhc2tEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cbiAgICB0YXNrQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Rhc2snKTtcbiAgICB0YXNrVGl0bGUuY2xhc3NMaXN0LmFkZCgndGFzay1oJyk7XG4gICAgdGFza0NoZWNrLmNsYXNzTGlzdC5hZGQoJ2ljbycsICdjaGVja2JveCcpO1xuICAgIGR1ZURhdGUuY2xhc3NMaXN0LmFkZCgnZHVlLWRhdGUnKTtcbiAgICB0YXNrRGVzYy5jbGFzc0xpc3QuYWRkKCd0YXNrLWRlc2MnKTtcbiAgICB0YXNrQ2hlY2suc3JjID0gXCIuL2ltYWdlcy9pY29ucy9jaXJjbGUtc3ZncmVwby1jb20uc3ZnXCI7XG4gICAgXG4gICAgdGFza0NoZWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGFza0NvbnRhaW5lci5yZW1vdmUoKSk7XG5cbiAgICBpZiAoIXRpdGxlICYmICFkZXNjICYmICFkdWUpe1xuICAgICAgICBjb25zdCB0YXNrVGl0bGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNvbnN0IHRhc2tEZXNjSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBjb25zdCBkdWVEYXRlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB0YXNrVGl0bGVJbnB1dC5jbGFzc0xpc3QuYWRkKCd0YXNrLWgtaW5wdXQnKTtcbiAgICAgICAgdGFza0Rlc2NJbnB1dC5jbGFzc0xpc3QuYWRkKCd0YXNrLWRlc2MtaW5wdXQnKTtcbiAgICAgICAgdGFza1RpdGxlSW5wdXQudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgdGFza1RpdGxlSW5wdXQucGxhY2Vob2xkZXIgPSAnVGl0bGUnO1xuICAgICAgICBkdWVEYXRlSW5wdXQudHlwZSA9ICdkYXRlJztcbiAgICAgICAgdGFza0Rlc2NJbnB1dC50eXBlID0gJ3RleHQnO1xuICAgICAgICB0YXNrRGVzY0lucHV0LnBsYWNlaG9sZGVyID0gJ0Rlc2NyaXB0aW9uJztcblxuICAgICAgICB0YXNrVGl0bGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICB0YXNrVGl0bGUuYXBwZW5kKHRhc2tUaXRsZUlucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIHRhc2tUaXRsZUlucHV0LnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZHVlRGF0ZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGR1ZURhdGUuYXBwZW5kKGR1ZURhdGVJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICBkdWVEYXRlSW5wdXQucmVtb3ZlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIHRhc2tEZXNjSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGFza0Rlc2MuYXBwZW5kKHRhc2tEZXNjSW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgdGFza0Rlc2NJbnB1dC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRhc2tUaXRsZS5hcHBlbmQodGFza0NoZWNrLCB0YXNrVGl0bGVJbnB1dClcbiAgICAgICAgdGFza0Rlc2MuYXBwZW5kKHRhc2tEZXNjSW5wdXQpO1xuICAgICAgICBkdWVEYXRlLmFwcGVuZChkdWVEYXRlSW5wdXQpO1xuXG4gICAgICAgIHRhc2tDb250YWluZXIuYXBwZW5kKHRhc2tUaXRsZSwgZHVlRGF0ZSwgdGFza0Rlc2MpO1xuICAgICAgICBhZGRUYXNrQnRuLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlYmVnaW4nLCB0YXNrQ29udGFpbmVyKTtcblxuICAgICAgICBhZGRUYXNrKGhlYWRlci50ZXh0Q29udGVudCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0c0NvbnRyb2xsZXIuZGVmYXVsdFByb2plY3QudGFza3MpXG4gICAgICAgIHRhc2tUaXRsZS5hcHBlbmQodGFza0NoZWNrLCB0aXRsZSk7XG4gICAgICAgIGR1ZURhdGUudGV4dENvbnRlbnQgPSBkdWU7XG4gICAgICAgIHRhc2tEZXNjLnRleHRDb250ZW50ID0gZGVzYztcbiAgICAgICAgdGFza0NvbnRhaW5lci5hcHBlbmQodGFza1RpdGxlLCBkdWVEYXRlLCB0YXNrRGVzYyk7XG4gICAgICAgIGFkZFRhc2tCdG4uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIHRhc2tDb250YWluZXIpO1xuICAgIH0gIFxufVxuXG5cbmNvbnN0IHJlbmRlclRhc2tET00gPSAoKCk9PiB7IFxuICAgIGNvbnN0IGFkZFRhc2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRhc2snKTtcbiAgICBhZGRUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZ2VuZXJhdGVUYXNrRE9NKCkpO1xufSkoKTtcblxuY29uc3QgZ2VuZXJhdGVQcm9qVGl0bGVET00gPSAodGl0bGUpID0+IHtcbiAgICBjb25zdCBwcm9qQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtaXRlbXMtdWwnKTtcbiAgICBjb25zdCBwcm9qSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgY29uc3QgcHJvakljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBjb25zdCBjbG9zZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBjb25zdCBwcm9qVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICBwcm9qSXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWl0ZW0nKTtcbiAgICBwcm9qSWNvbi5jbGFzc0xpc3QuYWRkKCdpY28nKTtcbiAgICBwcm9qSWNvbi5jbGFzc0xpc3QuYWRkKCdhZGQtcHJvaicpO1xuICAgIHByb2pJY29uLnNyYyA9ICcuL2ltYWdlcy9pY29ucy90YXNrLWxpc3Qtc3ZncmVwby1jb20uc3ZnJztcbiAgICBjbG9zZUljb24uY2xhc3NMaXN0LmFkZCgnY2xvc2UtcHJvaicpO1xuICAgIGNsb3NlSWNvbi5zcmMgPSAnLi9pbWFnZXMvaWNvbnMvY2xvc2Utc3ZncmVwby1jb20uc3ZnJztcbiAgICBcbiAgICBpZiAoIXRpdGxlKXtcbiAgICAgICAgY29uc3QgcHJvalRpdGxlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBwcm9qVGl0bGVJbnB1dC50eXBlID0gJ3RleHQnO1xuICAgICAgICBwcm9qVGl0bGVJbnB1dC5wbGFjZWhvbGRlciA9ICdQcm9qZWN0IE5hbWUnO1xuICAgICAgICBwcm9qVGl0bGVJbnB1dC5jbGFzc0xpc3QuYWRkKCdwcm9qLXRpdGxlLWlucHV0Jyk7XG5cbiAgICAgICAgcHJvalRpdGxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgcHJvalRpdGxlLmFwcGVuZChwcm9qVGl0bGVJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICBwcm9qVGl0bGVJbnB1dC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByb2pJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVuZGVyUHJvamVjdChwcm9qVGl0bGUudGV4dENvbnRlbnQpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2pUaXRsZS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBhZGRQcm9qKHByb2pUaXRsZS50ZXh0Q29udGVudCk7XG4gICAgICAgIH0pXG4gICAgICAgIHByb2pUaXRsZS5hcHBlbmQocHJvalRpdGxlSW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJvalRpdGxlLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgICAgIHByb2pJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVuZGVyUHJvamVjdCh0aXRsZSkpXG4gICAgfVxuICAgIFxuICAgIGNsb3NlSWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgcHJvakl0ZW0ucmVtb3ZlKCk7XG4gICAgfSlcbiAgICBwcm9qSXRlbS5hcHBlbmQocHJvakljb24sIHByb2pUaXRsZSwgY2xvc2VJY29uKTtcbiAgICBwcm9qQ29udGFpbmVyLmFwcGVuZChwcm9qSXRlbSk7XG59XG5cbmNvbnN0IG5ld1Byb2plY3QgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG5ld1Byb2pCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXByb2onKTtcbiAgICBuZXdQcm9qQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZ2VuZXJhdGVQcm9qVGl0bGVET00oKSk7XG59KSgpO1xuXG5leHBvcnQgeyBoYW1CdXJnZXIsIGdlbmVyYXRlVGFza0RPTSwgcmVuZGVyVGFza0RPTSwgbmV3UHJvamVjdCwgZ2VuZXJhdGVQcm9qVGl0bGVET00gfTtcblxuXG4vLyBiYWNrdXAgY29kZVxuXG4vLyBjb25zdCBnZW5lcmF0ZVByb2pUaXRsZURPTSA9ICgpID0+IHtcbi8vICAgICBjb25zdCBwcm9qQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtaXRlbXMtdWwnKTtcbi8vICAgICBjb25zdCBwcm9qSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4vLyAgICAgY29uc3QgcHJvakljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbi8vICAgICBjb25zdCBjbG9zZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbi8vICAgICBjb25zdCBwcm9qVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4vLyAgICAgY29uc3QgcHJvalRpdGxlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuXG4vLyAgICAgcHJvakl0ZW0uY2xhc3NMaXN0LmFkZCgncHJvamVjdC1pdGVtJyk7XG4vLyAgICAgcHJvakljb24uY2xhc3NMaXN0LmFkZCgnaWNvJyk7XG4vLyAgICAgcHJvakljb24uY2xhc3NMaXN0LmFkZCgnYWRkLXByb2onKTtcbi8vICAgICBwcm9qSWNvbi5zcmMgPSAnLi9pbWFnZXMvaWNvbnMvdGFzay1saXN0LXN2Z3JlcG8tY29tLnN2Zyc7XG4vLyAgICAgY2xvc2VJY29uLmNsYXNzTGlzdC5hZGQoJ2Nsb3NlLXByb2onKTtcbi8vICAgICBjbG9zZUljb24uc3JjID0gJy4vaW1hZ2VzL2ljb25zL2Nsb3NlLXN2Z3JlcG8tY29tLnN2Zyc7XG4vLyAgICAgcHJvalRpdGxlSW5wdXQudHlwZSA9ICd0ZXh0Jztcbi8vICAgICBwcm9qVGl0bGVJbnB1dC5wbGFjZWhvbGRlciA9ICdQcm9qZWN0IE5hbWUnO1xuLy8gICAgIHByb2pUaXRsZUlucHV0LmNsYXNzTGlzdC5hZGQoJ3Byb2otdGl0bGUtaW5wdXQnKTtcblxuLy8gICAgIHByb2pUaXRsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbi8vICAgICAgICAgcHJvalRpdGxlLmFwcGVuZChwcm9qVGl0bGVJbnB1dC52YWx1ZSk7XG4vLyAgICAgICAgIHByb2pUaXRsZUlucHV0LnJlbW92ZSgpO1xuLy8gICAgICAgICBwcm9qSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHJlbmRlclByb2plY3QocHJvalRpdGxlLnRleHRDb250ZW50KSk7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKHByb2pUaXRsZS50ZXh0Q29udGVudCk7XG4vLyAgICAgICAgIGFkZFByb2oocHJvalRpdGxlLnRleHRDb250ZW50KTtcbi8vICAgICB9KVxuLy8gICAgIGNsb3NlSWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbi8vICAgICAgICAgcHJvakl0ZW0ucmVtb3ZlKCk7XG4vLyAgICAgfSlcblxuLy8gICAgIHByb2pUaXRsZS5hcHBlbmQocHJvalRpdGxlSW5wdXQpO1xuLy8gICAgIHByb2pJdGVtLmFwcGVuZChwcm9qSWNvbiwgcHJvalRpdGxlLCBjbG9zZUljb24pO1xuICAgIFxuLy8gICAgIHByb2pDb250YWluZXIuYXBwZW5kKHByb2pJdGVtKTtcblxuLy8gfVxuXG4vLyBjb25zdCBnZW5lcmF0ZVRhc2tET00gPSAoKSA9PiB7XG4vLyAgICAgY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzaycpXG4vLyAgICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRpc3BsYXktbGgnKTtcbi8vICAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4vLyAgICAgY29uc3QgdGFza0NoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4vLyAgICAgY29uc3QgdGFza1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuLy8gICAgIGNvbnN0IHRhc2tEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuLy8gICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4vLyAgICAgY29uc3QgdGFza1RpdGxlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuLy8gICAgIGNvbnN0IHRhc2tEZXNjSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuLy8gICAgIGNvbnN0IGR1ZURhdGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cbi8vICAgICB0YXNrQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Rhc2snKTtcbi8vICAgICB0YXNrVGl0bGUuY2xhc3NMaXN0LmFkZCgndGFzay1oJyk7XG4vLyAgICAgdGFza0NoZWNrLmNsYXNzTGlzdC5hZGQoJ2ljbycsICdjaGVja2JveCcpO1xuLy8gICAgIGR1ZURhdGUuY2xhc3NMaXN0LmFkZCgnZHVlLWRhdGUnKTtcbi8vICAgICB0YXNrRGVzYy5jbGFzc0xpc3QuYWRkKCd0YXNrLWRlc2MnKTtcbi8vICAgICB0YXNrQ2hlY2suc3JjID0gXCIuL2ltYWdlcy9pY29ucy9jaXJjbGUtc3ZncmVwby1jb20uc3ZnXCI7XG4gICAgXG4vLyAgICAgdGFza0NoZWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGFza0NvbnRhaW5lci5yZW1vdmUoKSk7XG5cbi8vICAgICAgICAgdGFza1RpdGxlSW5wdXQuY2xhc3NMaXN0LmFkZCgndGFzay1oLWlucHV0Jyk7XG4vLyAgICAgICAgIHRhc2tEZXNjSW5wdXQuY2xhc3NMaXN0LmFkZCgndGFzay1kZXNjLWlucHV0Jyk7XG4vLyAgICAgICAgIHRhc2tUaXRsZUlucHV0LnR5cGUgPSAndGV4dCc7XG4vLyAgICAgICAgIHRhc2tUaXRsZUlucHV0LnBsYWNlaG9sZGVyID0gJ1RpdGxlJztcbi8vICAgICAgICAgZHVlRGF0ZUlucHV0LnR5cGUgPSAnZGF0ZSc7XG4vLyAgICAgICAgIHRhc2tEZXNjSW5wdXQudHlwZSA9ICd0ZXh0Jztcbi8vICAgICAgICAgdGFza0Rlc2NJbnB1dC5wbGFjZWhvbGRlciA9ICdEZXNjcmlwdGlvbic7XG5cbi8vICAgICAgICAgdGFza1RpdGxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuLy8gICAgICAgICAgICAgdGFza1RpdGxlLmFwcGVuZCh0YXNrVGl0bGVJbnB1dC52YWx1ZSk7XG4vLyAgICAgICAgICAgICB0YXNrVGl0bGVJbnB1dC5yZW1vdmUoKTtcbi8vICAgICAgICAgfSk7XG4vLyAgICAgICAgIGR1ZURhdGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4vLyAgICAgICAgICAgICBkdWVEYXRlLmFwcGVuZChkdWVEYXRlSW5wdXQudmFsdWUpO1xuLy8gICAgICAgICAgICAgZHVlRGF0ZUlucHV0LnJlbW92ZSgpO1xuLy8gICAgICAgICB9KVxuLy8gICAgICAgICB0YXNrRGVzY0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbi8vICAgICAgICAgICAgIHRhc2tEZXNjLmFwcGVuZCh0YXNrRGVzY0lucHV0LnZhbHVlKTtcbi8vICAgICAgICAgICAgIHRhc2tEZXNjSW5wdXQucmVtb3ZlKCk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgICAgICB0YXNrVGl0bGUuYXBwZW5kKHRhc2tDaGVjaywgdGFza1RpdGxlSW5wdXQpXG4vLyAgICAgICAgIHRhc2tEZXNjLmFwcGVuZCh0YXNrRGVzY0lucHV0KTtcbi8vICAgICAgICAgZHVlRGF0ZS5hcHBlbmQoZHVlRGF0ZUlucHV0KTtcblxuLy8gICAgICAgICB0YXNrQ29udGFpbmVyLmFwcGVuZCh0YXNrVGl0bGUsIGR1ZURhdGUsIHRhc2tEZXNjKTtcbi8vICAgICAgICAgYWRkVGFza0J0bi5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgdGFza0NvbnRhaW5lcik7XG5cbi8vICAgICAgICAgYWRkVGFzayhoZWFkZXIudGV4dENvbnRlbnQpO1xuICAgICBcbi8vIH07IiwiaW1wb3J0IHsgZ2VuZXJhdGVUYXNrRE9NLCBuZXdQcm9qZWN0IH0gZnJvbSBcIi4vaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBhZGRQcm9qLCBwcm9qZWN0c0NvbnRyb2xsZXIgfSBmcm9tIFwiLi9wcm9qZWN0XCI7XG5cbmNvbnN0IHRhc2tGYWN0b3J5ID0gKHRpdGxlLCBkZXNjLCBkdWVEYXRlKSA9PiB7XG4gICAgY29uc3QgY2xlYXJUYXNrID0gKCkgPT4ge1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIHt0aXRsZSwgZGVzYywgZHVlRGF0ZX1cbn1cbi8vIFRURCBBZGQgYSB0YXNrIHRoYXQncyBhbHJlYWR5IGluIHN0b3JhZ2VcbmNvbnN0IGFkZFRhc2sgPSAocHJvamVjdCwgc3RhdHVzKSA9PiB7XG4gICAgY29uc3QgbmV3VGFzayA9IHRhc2tGYWN0b3J5KCk7XG4gICAgbGV0IHRhc2tzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFzaycpKTtcblxuICAgIGlmIChwcm9qZWN0ID09PSAnSW5ib3gnKXtcbiAgICAgICAgdGFza3MuZm9yRWFjaCgodGFzaywgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFza0hlYWRlclRleHQgPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWgnKTtcbiAgICAgICAgICAgIGlmICh0YXNrSGVhZGVyVGV4dC50ZXh0Q29udGVudCAhPT0gXCJcIilyZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZVRhc2sgPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2JveCcpO1xuICAgICAgICAgICAgY29uc3QgdGFza0hlYWRlciA9IHRhc2suY2hpbGROb2Rlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGR1ZURhdGUgPSB0YXNrLmNoaWxkTm9kZXNbMV07XG4gICAgICAgICAgICBjb25zdCB0YXNrRGVzYyA9IHRhc2suY2hpbGROb2Rlc1syXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGFza0hlYWRlci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3VGFzay50aXRsZSA9IHRhc2tIZWFkZXIuY2hpbGROb2Rlc1sxXS5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RlZmF1bHRQcm9qZWN0JywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0KSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGFza0Rlc2MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG5ld1Rhc2suZGVzYyA9IHRhc2tEZXNjLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkZWZhdWx0UHJvamVjdCcsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQ29udHJvbGxlci5kZWZhdWx0UHJvamVjdCkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGR1ZURhdGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG5ld1Rhc2suZHVlRGF0ZSA9IGR1ZURhdGUuY2hpbGROb2Rlc1swXS5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RlZmF1bHRQcm9qZWN0JywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0KSk7XG4gICAgICAgICAgICB9KSBcbiAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0LnRhc2tzLnB1c2gobmV3VGFzayk7XG4gICAgICAgIHJlbW92ZVRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aGlzVGFza0luZGV4ID0gcHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0LnRhc2tzLmluZGV4T2YobmV3VGFzayk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzVGFza0luZGV4KVxuICAgICAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0LnRhc2tzLnNwbGljZSh0aGlzVGFza0luZGV4LCAxKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkZWZhdWx0UHJvamVjdCcsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQ29udHJvbGxlci5kZWZhdWx0UHJvamVjdCkpO1xuICAgICAgICB9KVxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGVmYXVsdFByb2plY3QnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIuZGVmYXVsdFByb2plY3QpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YXNrcy5mb3JFYWNoKCh0YXNrLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSGVhZGVyVGV4dCA9IHRhc2sucXVlcnlTZWxlY3RvcignLnRhc2staCcpO1xuICAgICAgICAgICAgaWYgKHRhc2tIZWFkZXJUZXh0LnRleHRDb250ZW50ICE9PSBcIlwiKXJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tIZWFkZXIgPSB0YXNrLmNoaWxkTm9kZXNbMF07XG4gICAgICAgICAgICBjb25zdCBkdWVEYXRlID0gdGFzay5jaGlsZE5vZGVzWzFdO1xuICAgICAgICAgICAgY29uc3QgdGFza0Rlc2MgPSB0YXNrLmNoaWxkTm9kZXNbMl07XG4gICAgICAgICAgICBjb25zdCByZW1vdmVUYXNrID0gdGFzay5xdWVyeVNlbGVjdG9yKCcuY2hlY2tib3gnKTtcblxuICAgICAgICAgICAgdGFza0hlYWRlci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3VGFzay50aXRsZSA9IHRhc2tIZWFkZXIuY2hpbGROb2Rlc1sxXS5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFza0Rlc2MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG5ld1Rhc2suZGVzYyA9IHRhc2tEZXNjLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5KSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3VGFzaylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZHVlRGF0ZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3VGFzay5kdWVEYXRlID0gZHVlRGF0ZS5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5LmZvckVhY2gocHJvaiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2pbJ3Byb2plY3ROYW1lJ10gPT09IHByb2plY3Qpe1xuICAgICAgICAgICAgICAgICAgICBwcm9qWyd0YXNrcyddLnB1c2gobmV3VGFzayk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVGFzay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUYXNrSW5kZXggPSBwcm9qWyd0YXNrcyddLmluZGV4T2YobmV3VGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qWyd0YXNrcyddLnNwbGljZShjdXJyZW50VGFza0luZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSkpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB7IG5ld1Rhc2sgfVxufTtcblxuZXhwb3J0IHsgYWRkVGFzayB9XG5cbi8vIC8vYmFja3VwIGNvZGVcbi8vIGlmKHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5LnNvbWUoKHByb2plY3QsIGkpID0+IHtcbi8vICAgICBwcm9qZWN0WzBdID09PSBoZWFkZXIudGV4dENvbnRlbnQ7XG4vLyB9KSl7XG4vLyAgICAgY29uc3QgZXhpc3RpbmdQcm9qZWN0ID0gcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuZmluZCggcHJvamVjdCA9PiB7XG4vLyAgICAgICAgIHByb2plY3RbMF0gPT09IGhlYWRlci50ZXh0Q29udGVudDtcbi8vICAgICB9KTtcbi8vICAgICBleGlzdGluZ1Byb2plY3RbMV0ucHVzaCh0YXNrKVxuLy8gICAgIGFkZFByb2ooKS5uZXdQcm9qZWN0LnRhc2tzID0gY3VycmVudFRhc2tzO1xuLy8gfVxuLy8gZWxzZSB7XG4vLyAgICAgYWRkUHJvaigpXG4vLyB9IiwiaW1wb3J0IHJlc2V0Q1NTIGZyb20gJy4vcmVzZXQuY3NzJztcbmltcG9ydCB7IGhhbUJ1cmdlciwgcmVuZGVyVGFza0RPTSwgbmV3UHJvamVjdCwgZ2VuZXJhdGVUYXNrRE9NLCBnZW5lcmF0ZVByb2pUaXRsZURPTSB9IGZyb20gJy4vbW9kdWxlcy9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgYWRkVGFzayB9IGZyb20gJy4vbW9kdWxlcy90YXNrJztcbmltcG9ydCB7IHJlbmRlckhvbWUgfSBmcm9tICcuL21vZHVsZXMvc3dpdGNoRE9NJztcbmltcG9ydCB7IGFkZFByb2osIHByb2plY3RzQ29udHJvbGxlciB9IGZyb20gJy4vbW9kdWxlcy9wcm9qZWN0JztcblxuLy8gTG9naWMgdG8gYWRkIGFuZCByZW1vdmUgdGFzayBmcm9tIG90aGVyIHByb2plY3RzJyB0YXNrcyBhcnJheSwgLS0gQ0xFQVIgLS1cbi8vIExvZ2ljIHRvIGtub3cgd2hpY2ggcHJvamVjdCB3ZSdyZSBpbiBhbmQgbG9hZCBpdHMgcmVzcGVjdGl2ZSB0YXNrIGFycmF5cyB0byB0aGUgRE9NIC0tIENMRUFSIC0tXG4vLyBMb2dpYyB0byBzb3J0IHRhc2tzIGJ5IGRhdGVcbi8vIHNhdmUgZXZlcnl0aGluZyB0byBsb2NhbCBzdG9yYWdlXG5cbmNvbnN0IHNhdmVQcm9qZWN0cyA9ICgoKSA9PiB7XG5cbiAgICBjb25zdCBfc3RvcmVQcm9qZWN0cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFByb2plY3RzID0gcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREZWZhdWx0UHJvaiA9IHByb2plY3RzQ29udHJvbGxlci5kZWZhdWx0UHJvamVjdDtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkoY3VycmVudFByb2plY3RzKSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkZWZhdWx0UHJvamVjdCcsIEpTT04uc3RyaW5naWZ5KGN1cnJlbnREZWZhdWx0UHJvaikpO1xuICAgIH1cblxuICAgIGNvbnN0IF9kaXNwbGF5U3RvcmVkVGFza3MgPSAoKSA9PiB7XG5cbiAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0LnRhc2tzLmZvckVhY2godGFzayA9PntcbiAgICAgICAgICAgIGdlbmVyYXRlVGFza0RPTSh0YXNrWyd0aXRsZSddLCB0YXNrWydkZXNjJ10sIHRhc2tbJ2R1ZURhdGUnXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFRhc2tzRE9NID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFzaycpKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFza3NET00uZm9yRWFjaCh0YXNrRE9NID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFza0hlYWRlciA9IHRhc2tET00uY2hpbGROb2Rlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlVGFzayA9IHRhc2tET00ucXVlcnlTZWxlY3RvcignLmNoZWNrYm94Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrSGVhZGVyLmNoaWxkTm9kZXNbMV0ubm9kZVZhbHVlID09PSB0YXNrWyd0aXRsZSddKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoZWxsbycpXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVUYXNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNUYXNrSW5kZXggPSBwcm9qZWN0c0NvbnRyb2xsZXIuZGVmYXVsdFByb2plY3QudGFza3MuaW5kZXhPZih0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0c0NvbnRyb2xsZXIuZGVmYXVsdFByb2plY3QudGFza3Muc3BsaWNlKHRoaXNUYXNrSW5kZXgsIDEpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGVmYXVsdFByb2plY3QnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIuZGVmYXVsdFByb2plY3QpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuZm9yRWFjaChwcm9qZWN0ID0+IHtcblxuICAgICAgICAgICAgZ2VuZXJhdGVQcm9qVGl0bGVET00ocHJvamVjdFsncHJvamVjdE5hbWUnXSk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SXRlbXNBcnJheSA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtaXRlbScpKTtcbiAgICAgICAgICAgIHByb2plY3RJdGVtc0FycmF5LmZvckVhY2gocHJvaiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvalRpdGxlID0gcHJvai5jaGlsZE5vZGVzWzFdXG4gICAgICAgICAgICAgICAgaWYgKHByb2pUaXRsZS5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50ICE9PSBwcm9qZWN0Wydwcm9qZWN0TmFtZSddKXJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9zZVByb2ogPSBwcm9qLmNoaWxkTm9kZXNbMl07XG4gICAgICAgICAgICAgICAgY2xvc2VQcm9qLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0SW5kZXggPSAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuaW5kZXhPZihwcm9qZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLnByb2plY3RzQXJyYXkuc3BsaWNlKHByb2plY3RJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5KSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByb2plY3RbJ3Rhc2tzJ10uZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRhc2tET00odGFza1sndGl0bGUnXSwgdGFza1snZGVzYyddLCB0YXNrWydkdWVEYXRlJ10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUYXNrc0RPTSA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhc2snKSk7XG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2tzRE9NLmZvckVhY2godGFza0RPTSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tIZWFkZXIgPSB0YXNrRE9NLmNoaWxkTm9kZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZVRhc2sgPSB0YXNrRE9NLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2JveCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFza0hlYWRlci5jaGlsZE5vZGVzWzFdLm5vZGVWYWx1ZSA9PT0gdGFza1sndGl0bGUnXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrRE9NLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogbm9uZTsnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVGFzay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlzVGFza0luZGV4ID0gcHJvamVjdC50YXNrcy5pbmRleE9mKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QudGFza3Muc3BsaWNlKHRoaXNUYXNrSW5kZXgsIDEpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBpZighbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RzJykpe1xuICAgICAgICBfc3RvcmVQcm9qZWN0cygpO1xuICAgICAgICAvLyBwcm9qZWN0c0NvbnRyb2xsZXIucHJvamVjdHNBcnJheSA9IF9zdG9yZVByb2plY3RzKCkuc3RvcmVkUHJvamVjdHM7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIGxldCBzdG9yZWRQcm9qZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwcm9qZWN0c1wiKSk7XG4gICAgICAgIGxldCBzdG9yZWREZWZhdWx0UHJvaiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJkZWZhdWx0UHJvamVjdFwiKSlcbiAgICAgICAgcHJvamVjdHNDb250cm9sbGVyLmRlZmF1bHRQcm9qZWN0ID0gc3RvcmVkRGVmYXVsdFByb2o7XG4gICAgICAgIHByb2plY3RzQ29udHJvbGxlci5wcm9qZWN0c0FycmF5ID0gc3RvcmVkUHJvamVjdHM7XG4gICAgICAgIF9kaXNwbGF5U3RvcmVkVGFza3MoKTtcbiAgICB9XG59KSgpO1xuXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIl9pMiIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwcm9qZWN0RmFjdG9yeSIsInByb2plY3ROYW1lIiwidGFza3MiLCJwcm9qZWN0c0NvbnRyb2xsZXIiLCJwcm9qZWN0c0FycmF5IiwiZGVmYXVsdFByb2plY3QiLCJyZW5kZXJQcm9qZWN0IiwiaGVhZGVyIiwiaG9tZSIsImluYm94IiwicmVuZGVySG9tZURPTSIsImN1cnJlbnRSZW5kZXJlZFRhc2tzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJ0YXNrIiwidGV4dENvbnRlbnQiLCJjaGlsZE5vZGVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByb2pUaXRsZSIsImN1cnJlbnRQcm9qZWN0cyIsImN1cnJlbnRUYXNrcyIsInByb2plY3QiLCJwcm9qIiwiY29uc29sZSIsImxvZyIsImdlbmVyYXRlVGFza0RPTSIsImhhbWJnQnV0dG9uIiwibWFpbkRpc3AiLCJzaWRlQmFyIiwiY2xvc2VIYW1iZyIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInRpdGxlIiwiZGVzYyIsImR1ZSIsImFkZFRhc2tCdG4iLCJ0YXNrQ29udGFpbmVyIiwidGFza0NoZWNrIiwidGFza1RpdGxlIiwidGFza0Rlc2MiLCJkdWVEYXRlIiwiYWRkIiwic3JjIiwiYXBwZW5kIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwidGFza1RpdGxlSW5wdXQiLCJ0YXNrRGVzY0lucHV0IiwiZHVlRGF0ZUlucHV0IiwidHlwZSIsInBsYWNlaG9sZGVyIiwidmFsdWUiLCJzdGF0dXMiLCJuZXdUYXNrIiwicmVtb3ZlVGFzayIsInRhc2tIZWFkZXIiLCJub2RlVmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidGhpc1Rhc2tJbmRleCIsImluZGV4T2YiLCJjdXJyZW50VGFza0luZGV4IiwiYWRkVGFzayIsImdlbmVyYXRlUHJvalRpdGxlRE9NIiwicHJvakNvbnRhaW5lciIsInByb2pJdGVtIiwicHJvakljb24iLCJjbG9zZUljb24iLCJwcm9qVGl0bGVJbnB1dCIsInByb2plY3RJdGVtc0FycmF5IiwibmV3UHJvamVjdCIsImNsb3NlUHJvaiIsInByb2plY3RJbmRleCIsImFkZFByb2oiLCJnZXRJdGVtIiwic3RvcmVkUHJvamVjdHMiLCJwYXJzZSIsInN0b3JlZERlZmF1bHRQcm9qIiwidGFza0RPTSIsImN1cnJlbnREZWZhdWx0UHJvaiIsIl9zdG9yZVByb2plY3RzIl0sInNvdXJjZVJvb3QiOiIifQ==