(()=>{"use strict";var e={917:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),c=n(645),a=n.n(c)()(r());a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(a[i]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&a[l[0]]||(void 0!==c&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=c),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([c]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var c={},a=[],s=0;s<e.length;s++){var i=e[s],d=o.base?i[0]+o.base:i[0],l=c[d]||0,u="".concat(d," ").concat(l);c[d]=l+1;var p=n(u),m={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(t[p].references++,t[p].updater(m)):t.push({identifier:u,updater:r(m,o),references:1}),a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var c=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var s=n(c[a]);t[s].references--}for(var i=o(e,r),d=0;d<c.length;d++){var l=n(c[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}c=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,r=n.media,c=n.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),c=n(569),a=n.n(c),s=n(565),i=n.n(s),d=n(216),l=n.n(d),u=n(589),p=n.n(u),m=n(917),f={};f.styleTagTransform=p(),f.setAttributes=i(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=e=>({projectName:e,tasks:[]}),g={projectsArray:[],defaultProject:h("inbox")},A=((()=>{const e=document.querySelector(".display-lh"),t=document.querySelector(".home-heading"),n=document.querySelector(".inbox"),o=()=>{const t=Array.from(document.querySelectorAll(".task"));if("Inbox"!==e){t.forEach((e=>e.setAttribute("style","display:none;"))),e.textContent="Inbox";for(let e=0;e<g.defaultProject.tasks.length;e++){const n=g.defaultProject.tasks[e],o=t[e];n.title===o.childNodes[0].textContent&&t[e].removeAttribute("style")}}};t.addEventListener("click",o),n.addEventListener("click",o)})(),(()=>{const e=document.querySelector(".hambg"),t=document.querySelector(".display"),n=document.querySelector(".sidebar"),o=document.querySelector(".close-hambg");e.addEventListener("click",(()=>{t.classList.toggle("display"),t.classList.toggle("hide-disp"),n.classList.toggle("sidebar"),n.classList.toggle("show-sb")})),o.addEventListener("click",(()=>{t.classList.toggle("display"),t.classList.toggle("hide-disp"),n.classList.toggle("sidebar"),n.classList.toggle("show-sb")}))})(),()=>{const e=document.querySelector(".add-task"),t=document.querySelector(".display-lh"),n=document.createElement("div"),o=document.createElement("img"),r=document.createElement("span"),c=document.createElement("p"),a=document.createElement("p"),s=document.createElement("input"),i=document.createElement("input"),d=document.createElement("input");n.classList.add("task"),r.classList.add("task-h"),o.classList.add("ico","checkbox"),a.classList.add("due-date"),c.classList.add("task-desc"),o.src="./images/icons/circle-svgrepo-com.svg",o.addEventListener("click",(()=>n.remove())),s.classList.add("task-h-input"),i.classList.add("task-desc-input"),s.type="text",s.placeholder="Title",d.type="date",i.type="text",i.placeholder="Description",s.addEventListener("change",(()=>{r.append(s.value),s.remove()})),d.addEventListener("change",(()=>{a.append(d.value),d.remove()})),i.addEventListener("change",(()=>{c.append(i.value),i.remove()})),r.append(o,s),c.append(i),a.append(d),n.append(r,a,c),e.insertAdjacentElement("beforebegin",n),(e=>{const t={title:undefined,desc:undefined,dueDate:undefined};let n=Array.from(document.querySelectorAll(".task"));"Inbox"===e?n.forEach(((n,o)=>{console.log(e),console.log(n),n.querySelector(".task-h");const r=n.querySelector(".checkbox");console.log(r);const c=n.childNodes[0],a=n.childNodes[1],s=n.childNodes[2];r.addEventListener("click",(()=>{const e=g.defaultProject.tasks.indexOf(t);console.log(e),g.defaultProject.tasks.splice(e,1),console.log("removed"),console.log(g.defaultProject.tasks)})),c.addEventListener("change",(()=>{t.title=c.childNodes[1].nodeValue})),s.addEventListener("change",(()=>{t.desc=s.childNodes[0].nodeValue})),a.addEventListener("change",(()=>{t.dueDate=a.childNodes[0].nodeValue})),g.defaultProject.tasks.push(t)})):n.forEach(((n,o)=>{if(""!==n.querySelector(".task-h").textContent)return;const r=n.childNodes[0],c=n.childNodes[1],a=n.childNodes[2],s=n.querySelector(".checkbox");r.addEventListener("change",(()=>{t.title=r.childNodes[1].nodeValue})),a.addEventListener("change",(()=>{t.desc=a.childNodes[0].nodeValue,console.log(t)})),c.addEventListener("change",(()=>{t.dueDate=c.childNodes[0].nodeValue})),g.projectsArray.forEach((n=>{n.projectName===e&&(n.tasks.push(t),s.addEventListener("click",(()=>{const e=n.tasks.indexOf(t);n.tasks.splice(e,1)})))}))}))})(t.textContent)}),v=(document.querySelector(".add-task").addEventListener("click",(()=>A())),()=>{const e=document.querySelector(".project-items-ul"),t=document.createElement("li"),n=document.createElement("img"),o=document.createElement("img"),r=document.createElement("span"),c=document.createElement("input");t.classList.add("project-item"),n.classList.add("ico"),n.classList.add("add-proj"),n.src="./images/icons/task-list-svgrepo-com.svg",o.classList.add("close-proj"),o.src="./images/icons/close-svgrepo-com.svg",c.type="text",c.placeholder="Project Name",c.classList.add("proj-title-input"),c.addEventListener("change",(()=>{r.append(c.value),c.remove(),t.addEventListener("click",(()=>(e=>{const t=document.querySelector(".display-lh"),n=document.querySelectorAll(".project-item"),o=Array.from(document.querySelectorAll(".task"));t.textContent=e,o.forEach((e=>e.setAttribute("style","display:none;"))),n.forEach((n=>{if(t.textContent===e){const t=Array.from(document.querySelectorAll(".task"));g.projectsArray.forEach(((n,o)=>{if(n.projectName===e){const e=n.tasks;for(let n=0;n<e.length;n++){const o=e[n];console.log(o.title);const r=t[n];console.log(r.childNodes[0].textContent),o.title===r.childNodes[0].textContent&&(console.log(t[n]),t[n].removeAttribute("style"))}}}))}console.log(n)}))})(r.textContent))),(e=>{const t=Array.from(document.querySelectorAll(".project-item")),n=h(e);n.projectName=e,t.forEach((t=>{t.childNodes[1].childNodes[0].textContent===e&&(t.childNodes[2].addEventListener("click",(()=>{const e=g.projectsArray.indexOf(n);g.projectsArray.splice(e,1)})),g.projectsArray.push(n),console.log(n))}))})(r.textContent)})),o.addEventListener("click",(()=>{t.remove()})),r.append(c),t.append(n,r,o),e.append(t)});document.querySelector(".add-proj").addEventListener("click",v)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,